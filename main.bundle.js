(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,'/*=======RESET=======*/\n/*by: Josh Comeau\nhttps://www.joshwcomeau.com/css/custom-css-reset/\n*/\n\n*,\n*::after,\n*::before {\n  box-sizing: border-box;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\nbutton {\n  all: unset;\n}\n\nbutton:focus {\n  outline: revert;\n}\n\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n\n:root {\n  --priority-high: #ffa0b7;\n  --priority-mid: #ffe5c2;\n  --priority-low: #82ff94;\n\n  --secondary-color: #c29cff;\n  --accent-color: #f1cffc;\n  --main-color: #ffffff;\n  --modal-bg-color: rgba(0, 0, 0, 0.254);\n\n  --project-border-color: #000;\n}\n\n:root {\n  --shadow-task: 2px 4px 15px rgba(0, 0, 0, 0.254);\n  --shadow-task-high: 2px 4px 18px rgba(0, 0, 0, 0.169);\n\n  --inset-base: inset 2px 4px 15px rgba(0, 0, 0, 0.12);\n  --inset-project: inset 2px 4px 15px rgba(0, 0, 0, 0.156);\n}\n\n.main-div {\n  background-color: var(--main-color);\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-columns: minmax(150px, 20vw) minmax(150px, 1fr);\n  grid-template-rows: minmax(80px, 4vh) 1fr;\n  grid-template-areas:\n    "header header"\n    "aside main";\n}\n\nheader {\n  grid-area: header;\n}\n\naside {\n  grid-area: aside;\n}\n\nmain {\n  grid-area: main;\n}\n\n/*========MODAL=========*/\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: var(--modal-bg-color);\n}\n\n.modal > div {\n  background-color: var(--main-color);\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  min-width: 300px;\n  max-width: 10vw;\n}\n\n/*=======BUTTONS=======*/\nbutton {\n  background-color: var(--project-border-color);\n  padding: 0.3rem 1rem;\n  border-radius: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  color: var(--main-color);\n  transition-property: transform, color, background-color;\n  transition-duration: 200ms;\n}\n\nbutton:hover {\n  cursor: pointer;\n}\n\nbutton:active {\n  transform: scale(95%);\n}\n\n/*==========HEADER==========*/\nheader {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n\nheader > p {\n  position: absolute;\n  top: 53px;\n  font-size: 0.8em;\n}\n\n/*========SIDEBAR=========*/\naside {\n  background-color: var(--main-color);\n  padding: 2vh 10%;\n  display: grid;\n  gap: 1vh;\n  grid-template-columns: 1fr;\n  grid-template-rows: 50px 1fr;\n  border-right: 4px solid var(--main-color);\n}\n\nmain {\n  background-color: var(--main-color);\n  display: flex;\n  flex-direction: column;\n  padding: 2vh 2vw;\n  border-radius: 20px 0 0 0;\n  box-shadow: var(--inset-base);\n}\n\n/*======PROJECT CONTAINER========*/\n#project-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5vh;\n}\n\n/*========PROJECT ELEMENT========*/\n.project {\n  background-color: var(--main-color);\n  max-width: 100%;\n  border-radius: 20px;\n  padding: 5% 2%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4%;\n  box-shadow: var(--inset-project);\n  transition-property: transform, border;\n  transition-duration: 50ms;\n}\n\n.project:hover {\n  transform: scale(104%);\n  box-shadow: var(--shadow-task-high);\n}\n\n#btn-create-project,\n#btn-new-task {\n  box-shadow: var(--shadow-elevation-low);\n}\n\n#btn-create-project:hover,\n#btn-new-task:hover {\n  background-color: var(--priority-low);\n  color: var(--project-border-color);\n}\n\n.project > p,\n.body-task > p {\n  text-align: center;\n  margin: 8px 0;\n}\n\n#date-info {\n  font-size: 0.7rem;\n}\n\n#btn-delete-project,\n.btn-delete-task,\n#btn-completed {\n  width: 35%;\n  transition-duration: 100ms;\n}\n\n#btn-delete-project:hover {\n  color: var(--project-border-color);\n  background-color: var(--priority-high);\n}\n\n/*=======TASK CONTAINER========*/\n\n#task-container {\n  display: grid;\n  gap: 2vh 1vw;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 24%));\n  grid-template-rows: repeat(auto-fil, 240px);\n  padding: 2vh 0vw;\n}\n\n/*======TASK======*/\n\n.body-task {\n  background-color: var(--main-color);\n  border-radius: 20px;\n  padding: 4%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: var(--shadow-task);\n  transition-property: transform, box-shadow;\n  transition-duration: 50ms;\n}\n\n.body-task:hover {\n  transform: scale(104%);\n  box-shadow: var(--shadow-task-high);\n}\n\n#btn-completed,\n.btn-delete-task {\n  width: 20%;\n  transition-property: colo, background-color;\n  transition-duration: 100ms;\n}\n#btn-completed {\n  margin: 4px 0;\n}\n\n.btn-delete-task:hover,\n#btn-completed:hover {\n  background-color: var(--priority-low);\n  color: var(--project-border-color);\n}\n\n.priority-low {\n  background-color: var(--priority-low);\n}\n\n.priority-mid {\n  background-color: var(--priority-mid);\n}\n\n.priority-high {\n  background-color: var(--priority-high);\n}\n\n.task-done {\n  opacity: 0.5;\n}\n\n/*======MAIN=======*/\n#btn-new-task {\n  justify-self: center;\n  width: 9vw;\n  margin-top: 2vh;\n}\n\n/*========FORMS=======*/\n.form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n}\n\n.form > input,\n.form > textarea {\n  width: 90%;\n  padding: 5px;\n}\n\n.form > textarea {\n  margin-bottom: 8px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['/*=======RESET=======*/\n/*by: Josh Comeau\nhttps://www.joshwcomeau.com/css/custom-css-reset/\n*/\n\n*,\n*::after,\n*::before {\n  box-sizing: border-box;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\nbutton {\n  all: unset;\n}\n\nbutton:focus {\n  outline: revert;\n}\n\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n\n:root {\n  --priority-high: #ffa0b7;\n  --priority-mid: #ffe5c2;\n  --priority-low: #82ff94;\n\n  --secondary-color: #c29cff;\n  --accent-color: #f1cffc;\n  --main-color: #ffffff;\n  --modal-bg-color: rgba(0, 0, 0, 0.254);\n\n  --project-border-color: #000;\n}\n\n:root {\n  --shadow-task: 2px 4px 15px rgba(0, 0, 0, 0.254);\n  --shadow-task-high: 2px 4px 18px rgba(0, 0, 0, 0.169);\n\n  --inset-base: inset 2px 4px 15px rgba(0, 0, 0, 0.12);\n  --inset-project: inset 2px 4px 15px rgba(0, 0, 0, 0.156);\n}\n\n.main-div {\n  background-color: var(--main-color);\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-columns: minmax(150px, 20vw) minmax(150px, 1fr);\n  grid-template-rows: minmax(80px, 4vh) 1fr;\n  grid-template-areas:\n    "header header"\n    "aside main";\n}\n\nheader {\n  grid-area: header;\n}\n\naside {\n  grid-area: aside;\n}\n\nmain {\n  grid-area: main;\n}\n\n/*========MODAL=========*/\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: var(--modal-bg-color);\n}\n\n.modal > div {\n  background-color: var(--main-color);\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  min-width: 300px;\n  max-width: 10vw;\n}\n\n/*=======BUTTONS=======*/\nbutton {\n  background-color: var(--project-border-color);\n  padding: 0.3rem 1rem;\n  border-radius: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  color: var(--main-color);\n  transition-property: transform, color, background-color;\n  transition-duration: 200ms;\n}\n\nbutton:hover {\n  cursor: pointer;\n}\n\nbutton:active {\n  transform: scale(95%);\n}\n\n/*==========HEADER==========*/\nheader {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n\nheader > p {\n  position: absolute;\n  top: 53px;\n  font-size: 0.8em;\n}\n\n/*========SIDEBAR=========*/\naside {\n  background-color: var(--main-color);\n  padding: 2vh 10%;\n  display: grid;\n  gap: 1vh;\n  grid-template-columns: 1fr;\n  grid-template-rows: 50px 1fr;\n  border-right: 4px solid var(--main-color);\n}\n\nmain {\n  background-color: var(--main-color);\n  display: flex;\n  flex-direction: column;\n  padding: 2vh 2vw;\n  border-radius: 20px 0 0 0;\n  box-shadow: var(--inset-base);\n}\n\n/*======PROJECT CONTAINER========*/\n#project-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5vh;\n}\n\n/*========PROJECT ELEMENT========*/\n.project {\n  background-color: var(--main-color);\n  max-width: 100%;\n  border-radius: 20px;\n  padding: 5% 2%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4%;\n  box-shadow: var(--inset-project);\n  transition-property: transform, border;\n  transition-duration: 50ms;\n}\n\n.project:hover {\n  transform: scale(104%);\n  box-shadow: var(--shadow-task-high);\n}\n\n#btn-create-project,\n#btn-new-task {\n  box-shadow: var(--shadow-elevation-low);\n}\n\n#btn-create-project:hover,\n#btn-new-task:hover {\n  background-color: var(--priority-low);\n  color: var(--project-border-color);\n}\n\n.project > p,\n.body-task > p {\n  text-align: center;\n  margin: 8px 0;\n}\n\n#date-info {\n  font-size: 0.7rem;\n}\n\n#btn-delete-project,\n.btn-delete-task,\n#btn-completed {\n  width: 35%;\n  transition-duration: 100ms;\n}\n\n#btn-delete-project:hover {\n  color: var(--project-border-color);\n  background-color: var(--priority-high);\n}\n\n/*=======TASK CONTAINER========*/\n\n#task-container {\n  display: grid;\n  gap: 2vh 1vw;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 24%));\n  grid-template-rows: repeat(auto-fil, 240px);\n  padding: 2vh 0vw;\n}\n\n/*======TASK======*/\n\n.body-task {\n  background-color: var(--main-color);\n  border-radius: 20px;\n  padding: 4%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: var(--shadow-task);\n  transition-property: transform, box-shadow;\n  transition-duration: 50ms;\n}\n\n.body-task:hover {\n  transform: scale(104%);\n  box-shadow: var(--shadow-task-high);\n}\n\n#btn-completed,\n.btn-delete-task {\n  width: 20%;\n  transition-property: colo, background-color;\n  transition-duration: 100ms;\n}\n#btn-completed {\n  margin: 4px 0;\n}\n\n.btn-delete-task:hover,\n#btn-completed:hover {\n  background-color: var(--priority-low);\n  color: var(--project-border-color);\n}\n\n.priority-low {\n  background-color: var(--priority-low);\n}\n\n.priority-mid {\n  background-color: var(--priority-mid);\n}\n\n.priority-high {\n  background-color: var(--priority-high);\n}\n\n.task-done {\n  opacity: 0.5;\n}\n\n/*======MAIN=======*/\n#btn-new-task {\n  justify-self: center;\n  width: 9vw;\n  margin-top: 2vh;\n}\n\n/*========FORMS=======*/\n.form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n}\n\n.form > input,\n.form > textarea {\n  width: 90%;\n  padding: 5px;\n}\n\n.form > textarea {\n  margin-bottom: 8px;\n}\n'],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],d=0;d<e.length;d++){var c=e[d],s=r.base?c[0]+r.base:c[0],l=o[s]||0,u="".concat(s," ").concat(l);o[s]=l+1;var m=n(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)t[m].references++,t[m].updater(A);else{var h=a(A,r);r.byIndex=d,t.splice(d,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var d=n(o[i]);t[d].references--}for(var c=r(e,a),s=0;s<o.length;s++){var l=n(o[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=e=>{const t=document.createElement("div"),n=document.createElement("button"),r=document.createElement("button"),a=document.createElement("h3"),o=document.createElement("p"),i=document.createElement("div"),d=document.createElement("p"),c=document.createElement("h5");switch(1==e.getTaskStatus()&&t.classList.add("task-done"),e.getPriority()){case"Low":t.classList.add("priority-low","body-task");break;case"Mid":t.classList.add("priority-mid","body-task");break;case"High":t.classList.add("priority-high","body-task")}return""==e.taskDates.getDueDate()?d.textContent="No due date!":d.textContent=`Due on ${e.taskDates.getDueDate()}`,i.appendChild(d),a.textContent=e.getTitle(),c.textContent=`${e.getPriority()}-level priority`,o.textContent=e.getDescription(),r.textContent="Delete",r.className="btn-delete-task",n.textContent="Done",n.id="btn-completed",d.id="date-info",t.appendChild(a),t.appendChild(c),t.appendChild(o),t.appendChild(i),t.appendChild(n),t.appendChild(r),t},t=()=>{const e=document.createElement("select"),t=document.createElement("option"),n=document.createElement("option"),r=document.createElement("option");return t.textContent="High",n.textContent="Mid",r.textContent="Low",e.appendChild(r),e.appendChild(n),e.appendChild(t),e},r=e=>{const t=document.createElement("div"),n=document.createElement("h3"),r=document.createElement("p"),a=document.createElement("p"),o=document.createElement("button");return o.textContent="Delete",o.id="btn-delete-project",n.textContent=e.getName(),r.textContent=e.getDescription(),a.textContent=`Created on ${e.projectDates.getCreationDate()}`,a.id="date-info",t.className="project",t.appendChild(n),t.appendChild(r),t.appendChild(a),t.appendChild(o),t},a=e=>{const t=document.createElement("div"),n=document.createElement("input"),r=document.createElement("textarea"),a=document.createElement("button"),o=document.createElement("button");return t.classList.add("form"),o.textContent="Cancel",o.id="btn-cancel-editProjForm",a.textContent="Update",a.id="btn-update-editProjForm",n.maxLength=40,r.maxLength=120,"Unnamed"==e.getName()?n.placeholder=e.getName():n.value=e.getName(),"No description"==e.getDescription()?r.placeholder=e.getDescription():r.textContent=e.getDescription(),t.appendChild(n),t.appendChild(r),t.appendChild(a),t.appendChild(o),t},o=e=>{const n=document.createElement("div"),r=document.createElement("input"),a=document.createElement("textarea"),o=document.createElement("label"),i=document.createElement("input"),d=document.createElement("button"),c=document.createElement("button"),s=t(),l=document.createElement("label");return c.textContent="Cancel",c.id="btn-cancel-editTaskForm",o.textContent="Select a due date",i.type="date",i.id="date-field",d.textContent="Update",d.id="btn-update-editTaskForm",r.maxLength=40,a.maxLength=120,l.textContent="Priority",s.value=e.getPriority(),n.classList.add("form"),""!=e.taskDates.getDueDate()&&(i.value=e.taskDates.getDueDate()),"Untitled"==e.getTitle()?r.placeholder=e.getTitle():r.value=e.getTitle(),"No description"==e.getDescription()?a.placeholder=e.getDescription():a.textContent=e.getDescription(),n.appendChild(r),n.appendChild(l),n.appendChild(s),n.appendChild(a),n.appendChild(o),n.appendChild(i),n.appendChild(d),n.appendChild(c),n};var i=n(379),d=n.n(i),c=n(795),s=n.n(c),l=n(569),u=n.n(l),m=n(565),A=n.n(m),h=n(216),p=n.n(h),f=n(589),g=n.n(f),C=n(426),v={};v.styleTagTransform=g(),v.setAttributes=A(),v.insert=u().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=p(),d()(C.Z,v),C.Z&&C.Z.locals&&C.Z.locals;const b=function(){let e=[],t=0,n=0;const r=t=>{for(let n=0;n<e.length;++n)if(e[n]==t)return n;return-1},a=t=>{for(let n=0;n<e.length;++n)if(e[n]===t)return n;return-1};return{append:n=>{e[t++]=n},find:r,findStrict:a,remove:n=>{let a=r(n);return a>-1&&(e.splice(a,1),--t,!0)},removeStrict:n=>{let r=a(n);return r>-1&&(e.splice(r,1),--t,!0)},length:()=>t,toString:()=>e,insert:(n,a)=>{const o=r(a);return o>-1&&(e.splice(o+1,0,n),++t,!0)},clear:()=>{e=[],t=n=0},contains:t=>{for(let n=0;n<e.length;++n)if(e[n]==t)return!0;return!1},front:()=>{n=0},end:()=>{n=t-1},prev:()=>{n>0&&--n},next:()=>{++n},currPos:()=>n,moveTo:e=>{n=e},getElement:()=>e[n]}};function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function w(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function y(e){w(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===E(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function x(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function B(e){w(1,arguments);var t=y(e),n=t.getUTCDay(),r=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function k(e){w(1,arguments);var t=y(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=B(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=B(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}var T={};function D(){return T}function M(e,t){var n,r,a,o,i,d,c,s;w(1,arguments);var l=D(),u=x(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==a?a:l.weekStartsOn)&&void 0!==r?r:null===(c=l.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=y(e),A=m.getUTCDay(),h=(A<u?7:0)+A-u;return m.setUTCDate(m.getUTCDate()-h),m.setUTCHours(0,0,0,0),m}function S(e,t){var n,r,a,o,i,d,c,s;w(1,arguments);var l=y(e),u=l.getUTCFullYear(),m=D(),A=x(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==r?r:null===(c=m.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(u+1,0,A),h.setUTCHours(0,0,0,0);var p=M(h,t),f=new Date(0);f.setUTCFullYear(u,0,A),f.setUTCHours(0,0,0,0);var g=M(f,t);return l.getTime()>=p.getTime()?u+1:l.getTime()>=g.getTime()?u:u-1}function j(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const P=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return j("yy"===t?r%100:r,t.length)},U=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):j(n+1,2)},N=function(e,t){return j(e.getUTCDate(),t.length)},L=function(e,t){return j(e.getUTCHours()%12||12,t.length)},O=function(e,t){return j(e.getUTCHours(),t.length)},q=function(e,t){return j(e.getUTCMinutes(),t.length)},Y=function(e,t){return j(e.getUTCSeconds(),t.length)},W=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,n-3)),t.length)};var F={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return P(e,t)},Y:function(e,t,n,r){var a=S(e,r),o=a>0?a:1-a;return"YY"===t?j(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):j(o,t.length)},R:function(e,t){return j(k(e),t.length)},u:function(e,t){return j(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return j(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return U(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){w(1,arguments);var n=y(e),r=M(n,t).getTime()-function(e,t){var n,r,a,o,i,d,c,s;w(1,arguments);var l=D(),u=x(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==a?a:l.firstWeekContainsDate)&&void 0!==r?r:null===(c=l.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1),m=S(e,t),A=new Date(0);return A.setUTCFullYear(m,0,u),A.setUTCHours(0,0,0,0),M(A,t)}(n,t).getTime();return Math.round(r/6048e5)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):j(a,t.length)},I:function(e,t,n){var r=function(e){w(1,arguments);var t=y(e),n=B(t).getTime()-function(e){w(1,arguments);var t=k(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),B(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):j(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):N(e,t)},D:function(e,t,n){var r=function(e){w(1,arguments);var t=y(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=n-t.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):j(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return j(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return j(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return j(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return L(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):O(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):q(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):Y(e,t)},S:function(e,t){return W(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return z(a);case"XXXX":case"XX":return H(a);default:return H(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return z(a);case"xxxx":case"xx":return H(a);default:return H(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+R(a,":");default:return"GMT"+H(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+R(a,":");default:return"GMT"+H(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return j(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return j((r._originalDate||e).getTime(),t.length)}};function R(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+j(o,2)}function z(e,t){return e%60==0?(e>0?"-":"+")+j(Math.abs(e)/60,2):H(e,t)}function H(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+j(Math.floor(a/60),2)+n+j(a%60,2)}const I=F;var Q=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},G=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const X={p:G,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return Q(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Q(a,t)).replace("{{time}}",G(o,t))}};function J(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var V=["D","DD"],Z=["YY","YYYY"];function _(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var K={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function $(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const ee={date:$({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:$({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:$({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var te={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ne(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[d]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const re={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ne({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ne({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:ne({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ne({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ne({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ae(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,d=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(c);return i=e.valueCallback?e.valueCallback(s):s,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(d.length)}}}var oe,ie={ordinalNumber:(oe={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(oe.matchPattern);if(!n)return null;var r=n[0],a=e.match(oe.parsePattern);if(!a)return null;var o=oe.valueCallback?oe.valueCallback(a[0]):a[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:e.slice(r.length)}}),era:ae({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ae({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ae({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ae({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ae({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const de={code:"en-US",formatDistance:function(e,t,n){var r,a=K[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:ee,formatRelative:function(e,t,n,r){return te[e]},localize:re,match:ie,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,se=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,le=/^'([^]*?)'?$/,ue=/''/g,me=/[a-zA-Z]/;function Ae(e,t,n){var r,a,o,i,d,c,s,l,u,m,A,h,p,f,g,C,v,b;w(2,arguments);var B=String(t),k=D(),T=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:k.locale)&&void 0!==r?r:de,M=x(null!==(o=null!==(i=null!==(d=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==d?d:k.firstWeekContainsDate)&&void 0!==i?i:null===(u=k.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==o?o:1);if(!(M>=1&&M<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=x(null!==(A=null!==(h=null!==(p=null!==(f=null==n?void 0:n.weekStartsOn)&&void 0!==f?f:null==n||null===(g=n.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==p?p:k.weekStartsOn)&&void 0!==h?h:null===(v=k.locale)||void 0===v||null===(b=v.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==A?A:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var j=y(e);if(!function(e){if(w(1,arguments),!function(e){return w(1,arguments),e instanceof Date||"object"===E(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=y(e);return!isNaN(Number(t))}(j))throw new RangeError("Invalid time value");var P=function(e,t){return w(2,arguments),function(e,t){w(2,arguments);var n=y(e).getTime(),r=x(t);return new Date(n+r)}(e,-x(t))}(j,J(j)),U={firstWeekContainsDate:M,weekStartsOn:S,locale:T,_originalDate:j};return B.match(se).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,X[t])(e,T.formatLong):e})).join("").match(ce).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(le))?o[1].replace(ue,"'"):a;var d,c=I[i];if(c)return null!=n&&n.useAdditionalWeekYearTokens||(d=r,-1===Z.indexOf(d))||_(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==V.indexOf(e)}(r)||_(r,t,String(e)),c(P,r,T.localize,U);if(i.match(me))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function he(e){w(1,arguments);var t=y(e);return t.setHours(0,0,0,0),t}function pe(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}const fe=()=>{const e=Ae(new Date,"MMMM d, yyyy");let t="";return{getDueDate:()=>t,getCreationDate:()=>e,getTimeDifference:()=>function(e,t){w(2,arguments);var n=y(e),r=y(t),a=pe(n,r),o=Math.abs(function(e,t){w(2,arguments);var n=he(e),r=he(t),a=n.getTime()-J(n),o=r.getTime()-J(r);return Math.round((a-o)/864e5)}(n,r));n.setDate(n.getDate()-a*o);var i=a*(o-Number(pe(n,r)===-a));return 0===i?0:i}(t,e),setDueDate:e=>{t=Ae(new Date(e),"MMMM d, yyyy")}}};function ge(...e){const t=document.getElementById("general-modal");e.forEach((e=>t.appendChild(e))),t.style.display="block"}const Ce=()=>{const e=document.querySelector("#general-modal");document.getElementById("general-modal").style.display="none",e.removeChild(e.firstChild)},ve=(e,t)=>Array.prototype.indexOf.call(t.children,e),be=(e,t)=>e.getTasks()[t],Ee=(e,t)=>{let n=e.target.parentNode.parentNode,r=e.target.parentNode,a=ve(r,n),o=be(t,a);t.removeTask(o)};function we(t){const n=document.getElementById("task-container");!function(e){let[...t]=e.childNodes;for(let n=0;n<t.length;++n)e.removeChild(t[n])}(n),0!=Be.toString().length?function(t,n){for(let r of t.getTasks()){let a=e(r);ye(a,t),n.appendChild(a)}}(t,n):ke.setProject(void 0)}function ye(e,t){const n=e.children.item(5);e.children.item(4).addEventListener("click",(function(n){const r=ve(e,e.parentNode);be(t,r).switchTaskStatus(),we(t)})),n.addEventListener("click",(function(e){Ee(e,t),we(t)})),e.addEventListener("dblclick",(function(e){!function(e,t){let n=e.target.parentNode,r=e.target,a=ve(r,n),i=be(t,a);const d=o(i);ge(d);const c=document.querySelector("#btn-cancel-editTaskForm"),s=document.querySelector("#btn-update-editTaskForm");c.addEventListener("click",Ce),s.addEventListener("click",(function(){t.removeTask(i),xe(d,i,t),Ce(),we(t)}))}(e,t)}))}function xe(e,t,n){const r=e.children.item(0).value,a=e.children.item(2).value,o=e.children.item(3).value,i=e.children.item(5).value;""==r?t.setTitle("Untitled"):t.setTitle(r),""==o?t.setDescription("No description"):t.setDescription(o),""!=i&&t.taskDates.setDueDate(i),t.setPriority(a),n.addTask(t)}const Be=b(),ke=function(){let e;return{setProject:function(t){e=t},getProject:function(){return e},getIndex:function(){return Be.find(e)},renderCurrentTasks:function(){we(e)}}}(),Te=()=>{let e="",t="";const n=fe();let r=b();return{setName:t=>{e=t},setDescription:e=>{t=e},getName:()=>e,getDescription:()=>t,addTask:e=>{r.append(e)},removeTask:e=>{r.remove(e)},getTasks:()=>r.toString(),projectDates:n}};function De(e){const t=document.querySelector("#project-container");for(t.innerHTML="",e.front();e.currPos()<e.length();e.next()){let n=e.getElement(),a=r(n),o=a.children.item(3);Se(n,a),t.appendChild(a),o.addEventListener("click",Me)}}function Me(e){!function(e,t){const n=document.querySelector("#project-container"),r=e.target.parentNode;let a=Array.prototype.indexOf.call(n.children,r);t.moveTo(a),t.remove(t.getElement()),n.removeChild(r),0==t.toString().length&&ke.setProject(void 0)}(e,Be),Be.moveTo(Be.currPos()-1)}function Se(e,t){t.addEventListener("click",(function(){ke.setProject(e),we(e)})),t.addEventListener("dblclick",(function(){!function(e){const t=a(e);ge(t);const n=document.querySelector("#btn-cancel-editProjForm"),r=document.querySelector("#btn-update-editProjForm");n.addEventListener("click",Ce),r.addEventListener("click",(function(){je(t,e),De(Be),Ce()}))}(e)}))}function je(e,t){const n=e.children.item(0).value,r=e.children.item(1).value;""==n?t.setName("Unnamed"):t.setName(n),""==r?t.setDescription("No description"):t.setDescription(r)}!function(){(()=>{const e=document.createElement("div"),t=(()=>{const e=document.createElement("main"),t=document.createElement("div"),n=(()=>{const e=document.createElement("button");return e.textContent="+ Task",e.id="btn-new-task",e})();return t.id="task-container",e.appendChild(n),e.appendChild(t),e})(),n=(()=>{const e=document.createElement("aside"),t=(()=>{const e=document.createElement("button");return e.textContent="+Project",e.id="btn-create-project",e})(),n=document.createElement("div");return n.id="project-container",e.appendChild(t),e.appendChild(n),e})(),r=(()=>{const e=document.createElement("header"),t=document.createElement("h2"),n=document.createElement("p");return n.textContent="Double click on a project or task to edit it!",t.textContent="ToBeDone",e.appendChild(t),e.appendChild(n),e})();(()=>{const e=document.createElement("div");e.id="general-modal",e.classList="modal",document.body.appendChild(e)})(),e.className="main-div",e.appendChild(t),e.appendChild(n),e.appendChild(r),document.body.appendChild(e)})(),function(){const e=Te();ke.setProject(e),e.setName("Elsa's birthday"),e.setDescription("Plan the best party she's ever had"),Be.append(e),De(Be)}();const e=document.querySelector("#btn-new-task"),n=document.querySelector("#btn-create-project"),r=document.getElementById("general-modal");window.addEventListener("click",(function(){this.event.target==r&&Ce()})),n.addEventListener("click",(function(){const e=(()=>{const e=document.createElement("div"),t=document.createElement("input"),n=document.createElement("textarea"),r=document.createElement("button"),a=document.createElement("button");return e.classList.add("form"),a.textContent="Cancel",a.id="btn-cancel-form",r.textContent="Create",r.id="btn-submit-form",t.placeholder="Project name: ",t.maxLength=40,n.placeholder="Description: ",n.maxLength=120,e.appendChild(t),e.appendChild(n),e.appendChild(r),e.appendChild(a),e})();ge(e);const t=document.querySelector("#btn-submit-form"),n=document.querySelector("#btn-cancel-form");t.addEventListener("click",(function(){const t=Te();ke.setProject(t),je(e,t),Be.append(t),Ce(),De(Be),we(ke.getProject())})),n.addEventListener("click",Ce)})),e.addEventListener("click",(function(){if(null==ke.getProject())return void ge((e="Empty list!",n="Create project first!",((e,t)=>{const n=document.createElement("div"),r=document.createElement("h3"),a=document.createElement("p");return r.textContent=e,a.textContent=t,n.appendChild(r),n.appendChild(a),n})(e,n)));var e,n;const r=(()=>{const e=document.createElement("div"),n=document.createElement("input"),r=document.createElement("textarea"),a=document.createElement("label"),o=document.createElement("input"),i=document.createElement("button"),d=document.createElement("button"),c=document.createElement("label"),s=t();return d.textContent="Cancel",d.id="btn-cancel-task",a.textContent="Select a due date",o.type="date",o.id="date-field",i.textContent="Create",i.id="btn-submit-task",n.placeholder="Title: ",r.placeholder="Description: ",c.textContent="Priority",n.maxLength=40,r.maxLength=120,e.classList.add("form"),e.appendChild(n),e.appendChild(c),e.appendChild(s),e.appendChild(r),e.appendChild(a),e.appendChild(o),e.appendChild(i),e.appendChild(d),e})();ge(r);const a=document.querySelector("#btn-submit-task"),o=document.querySelector("#btn-cancel-task");a.addEventListener("click",(function(){const e=(()=>{let e="",t="",n="",r=!1;const a=()=>t;return{setTitle:t=>{e=t},getPriority:a,setPriority:e=>{t=e},setDescription:e=>{n=e},getDescription:()=>n,getTitle:()=>e,getPriority:a,getTaskStatus:()=>r,switchTaskStatus:()=>{r=!r},taskDates:fe()}})();xe(r,e,ke.getProject()),we(ke.getProject()),Ce()})),o.addEventListener("click",Ce)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,